//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace e.Project.wcfService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/EprojectWithWcf")]
    public partial class Category : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CIDField;
        
        private string CNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CID {
            get {
                return this.CIDField;
            }
            set {
                if ((this.CIDField.Equals(value) != true)) {
                    this.CIDField = value;
                    this.RaisePropertyChanged("CID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CName {
            get {
                return this.CNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CNameField, value) != true)) {
                    this.CNameField = value;
                    this.RaisePropertyChanged("CName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Brands", Namespace="http://schemas.datacontract.org/2004/07/EprojectWithWcf")]
    public partial class Brands : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int BIDField;
        
        private string BNameField;
        
        private string PCategoryField;
        
        private int pidField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BID {
            get {
                return this.BIDField;
            }
            set {
                if ((this.BIDField.Equals(value) != true)) {
                    this.BIDField = value;
                    this.RaisePropertyChanged("BID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BName {
            get {
                return this.BNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BNameField, value) != true)) {
                    this.BNameField = value;
                    this.RaisePropertyChanged("BName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PCategory {
            get {
                return this.PCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.PCategoryField, value) != true)) {
                    this.PCategoryField = value;
                    this.RaisePropertyChanged("PCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int pid {
            get {
                return this.pidField;
            }
            set {
                if ((this.pidField.Equals(value) != true)) {
                    this.pidField = value;
                    this.RaisePropertyChanged("pid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/EprojectWithWcf")]
    public partial class Product : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string BnameField;
        
        private string CnameField;
        
        private int PIDField;
        
        private string PNameField;
        
        private string PriceField;
        
        private string QUNTITYField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Bname {
            get {
                return this.BnameField;
            }
            set {
                if ((object.ReferenceEquals(this.BnameField, value) != true)) {
                    this.BnameField = value;
                    this.RaisePropertyChanged("Bname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cname {
            get {
                return this.CnameField;
            }
            set {
                if ((object.ReferenceEquals(this.CnameField, value) != true)) {
                    this.CnameField = value;
                    this.RaisePropertyChanged("Cname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PID {
            get {
                return this.PIDField;
            }
            set {
                if ((this.PIDField.Equals(value) != true)) {
                    this.PIDField = value;
                    this.RaisePropertyChanged("PID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PName {
            get {
                return this.PNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PNameField, value) != true)) {
                    this.PNameField = value;
                    this.RaisePropertyChanged("PName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Price {
            get {
                return this.PriceField;
            }
            set {
                if ((object.ReferenceEquals(this.PriceField, value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QUNTITY {
            get {
                return this.QUNTITYField;
            }
            set {
                if ((object.ReferenceEquals(this.QUNTITYField, value) != true)) {
                    this.QUNTITYField = value;
                    this.RaisePropertyChanged("QUNTITY");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="wcfService.IMyAppProject")]
    public interface IMyAppProject {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyAppProject/Insert", ReplyAction="http://tempuri.org/IMyAppProject/InsertResponse")]
        System.Threading.Tasks.Task<string> InsertAsync(string Cname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyAppProject/Update", ReplyAction="http://tempuri.org/IMyAppProject/UpdateResponse")]
        System.Threading.Tasks.Task<string> UpdateAsync(int Cid, string Cname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyAppProject/Delete", ReplyAction="http://tempuri.org/IMyAppProject/DeleteResponse")]
        System.Threading.Tasks.Task<string> DeleteAsync(int Cid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyAppProject/ViewAllCat", ReplyAction="http://tempuri.org/IMyAppProject/ViewAllCatResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<e.Project.wcfService.Category>> ViewAllCatAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyAppProject/InsertBrand", ReplyAction="http://tempuri.org/IMyAppProject/InsertBrandResponse")]
        System.Threading.Tasks.Task<string> InsertBrandAsync(int Cid, string Bname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyAppProject/UpdateBrand", ReplyAction="http://tempuri.org/IMyAppProject/UpdateBrandResponse")]
        System.Threading.Tasks.Task<string> UpdateBrandAsync(int Bid, string Bname, int cid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyAppProject/DeleteBrand", ReplyAction="http://tempuri.org/IMyAppProject/DeleteBrandResponse")]
        System.Threading.Tasks.Task<string> DeleteBrandAsync(int Bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyAppProject/ViewAllBrand", ReplyAction="http://tempuri.org/IMyAppProject/ViewAllBrandResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<e.Project.wcfService.Brands>> ViewAllBrandAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyAppProject/ViewAllBrandByCat", ReplyAction="http://tempuri.org/IMyAppProject/ViewAllBrandByCatResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<e.Project.wcfService.Brands>> ViewAllBrandByCatAsync(int cat_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyAppProject/InsertProduct", ReplyAction="http://tempuri.org/IMyAppProject/InsertProductResponse")]
        System.Threading.Tasks.Task<string> InsertProductAsync(string Product, string Price, string Quantity, int Cid, int Bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyAppProject/UpdateProduct", ReplyAction="http://tempuri.org/IMyAppProject/UpdateProductResponse")]
        System.Threading.Tasks.Task<string> UpdateProductAsync(int Pid, string Product, string Price, string Quantity, int Cid, int Bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyAppProject/DeleteProduct", ReplyAction="http://tempuri.org/IMyAppProject/DeleteProductResponse")]
        System.Threading.Tasks.Task<string> DeleteProductAsync(int Pid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyAppProject/ViewAllProduct", ReplyAction="http://tempuri.org/IMyAppProject/ViewAllProductResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<e.Project.wcfService.Product>> ViewAllProductAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyAppProject/ViewAllProductSerch", ReplyAction="http://tempuri.org/IMyAppProject/ViewAllProductSerchResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<e.Project.wcfService.Product>> ViewAllProductSerchAsync(string Alp);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyAppProjectChannel : e.Project.wcfService.IMyAppProject, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyAppProjectClient : System.ServiceModel.ClientBase<e.Project.wcfService.IMyAppProject>, e.Project.wcfService.IMyAppProject {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MyAppProjectClient() : 
                base(MyAppProjectClient.GetDefaultBinding(), MyAppProjectClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMyAppProject.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MyAppProjectClient(EndpointConfiguration endpointConfiguration) : 
                base(MyAppProjectClient.GetBindingForEndpoint(endpointConfiguration), MyAppProjectClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MyAppProjectClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MyAppProjectClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MyAppProjectClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MyAppProjectClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MyAppProjectClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<string> InsertAsync(string Cname) {
            return base.Channel.InsertAsync(Cname);
        }
        
        public System.Threading.Tasks.Task<string> UpdateAsync(int Cid, string Cname) {
            return base.Channel.UpdateAsync(Cid, Cname);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAsync(int Cid) {
            return base.Channel.DeleteAsync(Cid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<e.Project.wcfService.Category>> ViewAllCatAsync() {
            return base.Channel.ViewAllCatAsync();
        }
        
        public System.Threading.Tasks.Task<string> InsertBrandAsync(int Cid, string Bname) {
            return base.Channel.InsertBrandAsync(Cid, Bname);
        }
        
        public System.Threading.Tasks.Task<string> UpdateBrandAsync(int Bid, string Bname, int cid) {
            return base.Channel.UpdateBrandAsync(Bid, Bname, cid);
        }
        
        public System.Threading.Tasks.Task<string> DeleteBrandAsync(int Bid) {
            return base.Channel.DeleteBrandAsync(Bid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<e.Project.wcfService.Brands>> ViewAllBrandAsync() {
            return base.Channel.ViewAllBrandAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<e.Project.wcfService.Brands>> ViewAllBrandByCatAsync(int cat_id) {
            return base.Channel.ViewAllBrandByCatAsync(cat_id);
        }
        
        public System.Threading.Tasks.Task<string> InsertProductAsync(string Product, string Price, string Quantity, int Cid, int Bid) {
            return base.Channel.InsertProductAsync(Product, Price, Quantity, Cid, Bid);
        }
        
        public System.Threading.Tasks.Task<string> UpdateProductAsync(int Pid, string Product, string Price, string Quantity, int Cid, int Bid) {
            return base.Channel.UpdateProductAsync(Pid, Product, Price, Quantity, Cid, Bid);
        }
        
        public System.Threading.Tasks.Task<string> DeleteProductAsync(int Pid) {
            return base.Channel.DeleteProductAsync(Pid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<e.Project.wcfService.Product>> ViewAllProductAsync() {
            return base.Channel.ViewAllProductAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<e.Project.wcfService.Product>> ViewAllProductSerchAsync(string Alp) {
            return base.Channel.ViewAllProductSerchAsync(Alp);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMyAppProject)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMyAppProject)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:64349/MyAppProject.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return MyAppProjectClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMyAppProject);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return MyAppProjectClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMyAppProject);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IMyAppProject,
        }
    }
}
